name: "[Manual] Pull Request Cleanup"

on:
  workflow_dispatch:
    inputs:
      pattern:
        description: |
          Tags pattern filter
        required: true
        type: string
        default: "rc.pr-"
      delete-pre-releases:
        description: |
          Should be deleted all pre-releases/tags?
        required: true
        type: boolean
        default: true

env:
  PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
  PULL_REQUEST_BRANCH: ${{ github.head_ref }}
  IMAGE_NAME: "ghcr.io/${{ github.repository }}"
  PACKAGE_NAME: oracledb_exporter
  PACKAGE_TYPE: container
  TAG_PATTERN: ${{ github.event.inputs.pattern }}
  USERNAME: ${{ github.repository_owner }}

jobs:
  cleanup-ghcr:
    runs-on: ubuntu-latest
    name: "cleanup-ghcr / ${{ github.event.inputs.pattern }}"
    steps:
      - name: Cleanup versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --silent \
            -H "Accept: application/vnd.github+json" \
            "/users/${{ env.USERNAME }}/packages/${{ env.PACKAGE_TYPE }}/${{ env.PACKAGE_NAME }}/versions" > versions.json

          VERSIONS=$(jq -rM '.[] | select(.metadata.container.tags[] | test("${{ github.event.inputs.pattern }}")) | .id' versions.json)
          for VERSION in $(echo -n "$VERSIONS")
          do
            TAG=$(jq -r \
              --arg VERSION "$VERSION" \
              '.[] | select(.id | tostring | test($VERSION)) | .metadata.container.tags | join(",")' \
              versions.json
            )
            DIGEST=$(jq -r \
              --arg VERSION "$VERSION" \
              '.[] | select(.id | tostring | test($VERSION)) | .name' \
              versions.json
            )
            RELEASE_ID=$(gh api \
              -H "Accept: application/vnd.github+json" \
              "/repos/${{ github.repository }}/releases/tags/$TAG" \
              --jq='.id'
            )
            echo "deleting ${IMAGE_NAME}:${TAG}"
            echo "digest=${DIGEST}"
            echo "deleting PACKAGE_VERSION_ID=${VERSION}"
            echo "deleting RELEASE_ID=${RELEASE_ID}"
            # https://github.com/cli/cli/issues/3937
            echo -n | gh api \
              --silent \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              "/users/${{ env.USERNAME }}/packages/${{ env.PACKAGE_TYPE }}/${{ env.PACKAGE_NAME }}/versions/$VERSION" \
              --input -
            if [ "${{ github.event.inputs.delete-pre-releases }}" = "true" ]; then
              echo -n | gh api \
                --silent \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                "/repos/${{ github.repository }}/releases/$RELEASE_ID" \
                --input -
            fi
          done
